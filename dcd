Perfeito! Vamos montar um **material de estudo focado nas alternativas** da lista de exercÃ­cios que vocÃª enviou, explicando o **porquÃª de cada resposta estar certa ou errada**, com exemplos e observaÃ§Ãµes importantes para prova.

---

## ğŸ“˜ ESTUDO GUIADO COM BASE NAS ALTERNATIVAS

---

### **1. DiferenÃ§a entre listas encadeadas simples e duplamente encadeadas**

- **(a)** Errado â€“ desempenho depende da implementaÃ§Ã£o, nÃ£o da estrutura.
- **(b)** Errado â€“ listas simples permitem remoÃ§Ã£o, apenas Ã© mais trabalhosa.
- âœ… **(c)** Certo â€“ lista **duplamente encadeada** tem ponteiros para o prÃ³ximo e o anterior.
- **(d)** Errado â€“ sÃ³ a duplamente encadeada tem ponteiro duplo.

ğŸ§  *Dica:* pense na diferenÃ§a entre mÃ£o Ãºnica (simples) e mÃ£o dupla (dupla).

---

### **2. Acesso a Ã­ndice inexistente de matriz**

- **(a)** Errado â€“ Java nÃ£o realoca matriz automaticamente.
- **(b)** Errado â€“ o programa lanÃ§a exceÃ§Ã£o, nÃ£o apenas para.
- âœ… **(c)** Certo â€“ ocorre um erro do tipo `ArrayIndexOutOfBoundsException`.
- **(d)** Errado â€“ nÃ£o retorna null, apenas estoura erro.

ğŸ§  *Dica:* memorize: **Ã­ndice invÃ¡lido = exceÃ§Ã£o**.

---

### **3. DiferenÃ§a entre matrizes e listas encadeadas**

- **(a)** Errado â€“ capacidade depende do tamanho da alocaÃ§Ã£o.
- **(b)** Errado â€“ matrizes **nÃ£o crescem dinamicamente** (listas sim).
- âœ… **(e)** Certo â€“ matriz = **estÃ¡tica**, lista = **dinÃ¢mica**.
- **(c)** Verdade â€“ listas encadeadas nÃ£o permitem acesso direto, mas a (e) Ã© mais completa.

ğŸ§  *Dica:* matriz Ã© um bloco fixo na memÃ³ria; lista vai crescendo.

---

### **4. O que Ã© uma lista encadeada**

- **(a)** Errado â€“ isso seria uma matriz multidimensional.
- âœ… **(b)** Certo â€“ lista encadeada Ã© feita de nÃ³s ligados entre si.
- **(c)** Errado â€“ memÃ³ria **nÃ£o** Ã© contÃ­gua.
- **(d)** Errado â€“ listas sÃ£o dinÃ¢micas, nÃ£o tÃªm tamanho fixo.

---

### **5. Fila circular**

- **(a)** Errado â€“ fila circular **reutiliza espaÃ§o**.
- âœ… **(b)** Certo â€“ ela reinicia no inÃ­cio ao remover elementos.
- **(c)** Errado â€“ pode ter elementos duplicados.
- **(d)** Errado â€“ os elementos **podem voltar** ao inÃ­cio.

---

### **6. CaracterÃ­stica de matriz**

- **(a)** Errado â€“ sÃ³ armazena dados do **mesmo tipo**.
- **(b)** Errado â€“ permite vÃ¡rias operaÃ§Ãµes.
- **(c)** Errado â€“ nÃ£o Ã© ideal para inserÃ§Ãµes/remoÃ§Ãµes.
- âœ… **(d)** Certo â€“ matriz Ã© bidimensional com tipos iguais.

---

### **7. RemoÃ§Ã£o em Fila FIFO**

- **(a)** Push â†’ Ã© de **pilha**
- **(b)** Add â†’ Ã© inserÃ§Ã£o
- âœ… **(c)** Dequeue â†’ remoÃ§Ã£o da **fila**
- **(d)** Pop â†’ Ã© de **pilha**

---

### **8. Push em pilha**

- âœ… **(a)** Certo â€“ adiciona no **topo** da pilha
- **(b)** Errado â€“ nÃ£o insere na base
- **(c)** Errado â€“ nÃ£o copia, adiciona
- **(d)** Errado â€“ isso seria o `pop`

---

### **9. DeclaraÃ§Ã£o de matriz bidimensional em Java**

- **(a)** Errado â€“ falta os `[]` na frente
- âœ… **(b)** Certo â€“ `tipo[][] nome = new tipo[l][c];`
- **(c)** Errado â€“ nÃ£o existe sintaxe com vÃ­rgula
- **(d)** Errado â€“ estÃ¡ incompleta

---

### **10. Complexidade de algoritmo**

- **(a)** Errado â€“ nÃ£o Ã© teste, Ã© anÃ¡lise
- **(b)** Errado â€“ nÃ£o sÃ£o os passos
- âœ… **(c)** Certo â€“ mede tempo ou espaÃ§o
- **(d)** Errado â€“ nÃºmero de linhas nÃ£o define complexidade

---

### **11. CÃ³digos Java**

Todos os trechos mostram situaÃ§Ãµes **simples de lÃ³gica condicional**. Observe:

- `idade = 18` â†’ menor que 50 â†’ imprime **"Verdade"**
- `idade = 18` e o teste Ã© `> 50` â†’ imprime **"Falso"**
- `idade >= 18` â†’ imprime **"maior de idade"**
- `numero = 7` â†’ 7 % 2 != 0 â†’ imprime **"Ã­mpar"**

---

### **12. Vantagens das listas encadeadas**

- **(a)** Errado â€“ depende do caso, nem sempre usa menos memÃ³ria
- **(b)** Errado â€“ nÃ£o tem acesso aleatÃ³rio
- âœ… **(c)** Certo â€“ pode inserir/remover facilmente
- **(d)** Errado â€“ algoritmos de busca sÃ£o mais lentos

---

### **13. OperaÃ§Ãµes da pilha**

- âœ… **(a)** Push (inserir) e Pop (remover)
- **(b)** Insert/Delete â†’ genÃ©rico
- **(c)** Enqueue/Dequeue â†’ de fila
- **(d)** Add/Remove â†’ genÃ©rico

---

### **14. O que Ã© operaÃ§Ã£o Pop**

- **(a)** Errado â€“ remove do topo, nÃ£o do meio
- **(b)** Errado â€“ isso Ã© push
- âœ… **(c)** Certo â€“ remove do **topo**
- **(d)** Errado â€“ isso seria o mÃ©todo peek()

---

### **15. O que Ã© o head**

- **(a)** Errado â€“ o meio da lista nÃ£o tem nome
- **(b)** Errado â€“ isso Ã© o tail
- **(c)** Errado â€“ head Ã© um nÃ³, nÃ£o uma posiÃ§Ã£o
- âœ… **(d)** Certo â€“ Ã© o **primeiro nÃ³** da lista

---

### **16. Algoritmo de 1 a 10**

```java
for (int i = 1; i <= 10; i++) {
    System.out.println(i);
}
```

---

### **17. Vantagem das listas para inserÃ§Ã£o/remoÃ§Ã£o**

- âœ… **(d)** Certo â€“ sem necessidade de realocar
- **(a)** Errado â€“ Ã s vezes usa mais memÃ³ria
- **(b)** Errado â€“ depende do uso
- **(c)** Errado â€“ nÃ£o hÃ¡ acesso direto

---

### **18. InserÃ§Ã£o em fila**

- **(a)** Push â†’ pilha
- **(b)** Insert â†’ genÃ©rico
- **(c)** Add â†’ pode confundir
- âœ… **(d)** Enqueue â†’ correto para **fila**

---

### **19. Verificar se b Ã© o menor**

```java
if (b < a && b < c) {
    System.out.println("B Ã© o menor valor.");
} else {
    System.out.println("B nÃ£o Ã© o menor.");
}
```

---

Se quiser, posso gerar agora um PDF ou DOC com tudo isso organizado e pronto para imprimir ou estudar. Deseja que eu crie esse material em arquivo?
