Perfeito! J√° que a prova vai ser baseada nessa lista, vou te montar um material mais completo com:

- Resumos te√≥ricos detalhados  
- Tabelas de compara√ß√£o  
- Exemplos com c√≥digo Java  
- Explica√ß√µes de cada alternativa das quest√µes  
- Dicas pr√°ticas de como resolver

---

## üìò RESUMO TE√ìRICO COMPLETO ‚Äì ESTRUTURA DE DADOS

---

### üîπ LISTAS ENCADEADAS

| Tipo                      | Caracter√≠stica Principal                                      |
|--------------------------|---------------------------------------------------------------|
| Simplesmente encadeada   | Cada n√≥ aponta para o pr√≥ximo                                 |
| Duplamente encadeada     | Cada n√≥ aponta para o anterior e o pr√≥ximo                    |
| Circular                 | O √∫ltimo elemento aponta para o primeiro                      |

**Vantagens sobre matrizes:**
- Crescem dinamicamente
- Inser√ß√µes e remo√ß√µes eficientes
- Sem necessidade de realoca√ß√£o de mem√≥ria

**Desvantagens:**
- Acesso sequencial (n√£o aleat√≥rio)
- Ocupam mais mem√≥ria por causa dos ponteiros

**Exemplo:**
```java
class No {
    int valor;
    No proximo;
}
```

---

### üîπ MATRIZES

- Estrutura de dados **est√°tica** (tamanho fixo)
- Armazena dados em **linhas e colunas**
- Precisa ser alocada com tamanho fixo no in√≠cio

**Exemplo em Java:**
```java
int[][] matriz = new int[2][3]; // 2 linhas, 3 colunas
```

**Erro comum:**
```java
matriz[5][2]; // se n√£o existir essa posi√ß√£o, d√° ArrayIndexOutOfBoundsException
```

---

### üîπ FILAS (Queue)

- L√≥gica FIFO (First In, First Out)
- **enqueue** ‚Üí adiciona elemento no final
- **dequeue** ‚Üí remove elemento do in√≠cio

**Fila Circular:**
- Reutiliza posi√ß√µes j√° liberadas (ideal para espa√ßo limitado)

---

### üîπ PILHAS (Stack)

- L√≥gica LIFO (Last In, First Out)
- **push** ‚Üí adiciona no topo
- **pop** ‚Üí remove do topo

**Exemplo com Stack do Java:**
```java
Stack<Integer> pilha = new Stack<>();
pilha.push(5);
System.out.println(pilha.pop()); // sai 5
```

---

### üîπ COMPLEXIDADE DE ALGORITMOS

- Medida de desempenho de um algoritmo
- Pode ser de **tempo** ou **espa√ßo**
- Exemplos:
  - O(1): constante
  - O(n): linear
  - O(n¬≤): quadr√°tica

---

### üîπ C√ìDIGOS ESSENCIAIS

**Verificar idade:**
```java
int idade = 18;
if (idade >= 18) {
    System.out.println("maior de idade");
} else {
    System.out.println("menor de idade");
}
```

**Verificar se √© par ou √≠mpar:**
```java
if (numero % 2 == 0) {
    System.out.println(numero + " √© par");
} else {
    System.out.println(numero + " √© √≠mpar");
}
```

**Contar de 1 a 10:**
```java
for (int i = 1; i <= 10; i++) {
    System.out.println(i);
}
```

**Verificar se b √© o menor valor:**
```java
if (b < a && b < c) {
    System.out.println("B √© o menor");
}
```

---

### üîπ DICAS DE PROVA

‚úÖ Leia as alternativas com calma: muitas pegam pela palavra-chave (ex: "est√°tica", "din√¢mica")  
‚úÖ Identifique o tipo de estrutura antes de resolver (fila, pilha, matriz, lista)  
‚úÖ Preste aten√ß√£o nos nomes dos m√©todos:  
- **push** e **pop** ‚Üí PILHA  
- **enqueue** e **dequeue** ‚Üí FILA

‚úÖ Se pedir para mostrar n√∫meros (ex: 1 a 10), pense em `for`.

---

Posso agora criar um PDF completo com esse conte√∫do pra voc√™ revisar, ou adicionar exerc√≠cios simulados com gabarito. O que voc√™ prefere?
